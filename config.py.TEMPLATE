########################################################################
# Configuration template for hxl-proxy
#
# Copy this to config.py (or similar), then change the values to suit.
# Before launching the application, set the environment variable
# HXL_PROXY_CONFIG to the full path to your config file, so that
# the hxl-proxy app can find it.
########################################################################
import os
import redis
from urllib.parse import urlparse
import distutils.util as util

#
# If True, will show detailed debugging information on errors
# Should be False for a production system
#
DEBUG = bool(util.strtobool(os.getenv('DEBUG', 'True')))

#
# Set the Python logging level for the app
# See https://docs.python.org/3/library/logging.html#logging-levels
#
LOGGING_LEVEL = os.getenv('LOGGING_LEVEL', 'ERROR')

#
# Change this to a key known only to your server
# (Used to secure cookies)
#
SECRET_KEY = os.getenv('SECRET_KEY', '<secret key>')

#
# Admin password MD5 hash
# To generate, use this command (replacing "PASSWORD" with your password):
# $ python -c 'import hashlib; print(hashlib.md5("PASSWORD".encode("utf-8")).hexdigest())'
#
ADMIN_PASSWORD_MD5 = os.getenv('ADMIN_PASSWORD_MD5', '<md5 hash>')

#
# Input configuration (reading remote datasets)
#
MAX_REQUEST_TIMEOUT = int(os.getenv('REQUEST_TIMEOUT', 30)) # maximum allowable request timeout

#
# Output cache configuration
# see https://flask-caching.readthedocs.io/en/latest/#built-in-cache-backends
#

CACHE_CONFIG = {
    # possible types: filesystem, redis
    'CACHE_TYPE': os.getenv('CACHE_TYPE', 'filesystem'),

    # redis output cache
    'CACHE_KEY_PREFIX': os.getenv('CACHE_KEY_PREFIX', 'hxl-proxy-out:'),
    'CACHE_DEFAULT_TIMEOUT': os.getenv('CACHE_DEFAULT_TIMEOUT', 3600),
    'CACHE_REDIS_PASSWORD': os.getenv('CACHE_REDIS_PASSWORD', ''),
    'CACHE_REDIS_URL': os.getenv('CACHE_REDIS_URL', "redis://localhost:6379/1"),

    # filesystem output cache options
    'CACHE_DIR': os.getenv('CACHE_DIR', '/tmp/'),
    'CACHE_THRESHOLD': int(os.getenv('CACHE_THRESHOLD', 1000))
}

if CACHE_CONFIG['CACHE_TYPE'] == 'redis':
    cache_redis_url = urlparse(CACHE_CONFIG['CACHE_REDIS_URL'])
    if len(cache_redis_url.path) > 1:
        cache_redis_db = cache_redis_url.path[1:]
    CACHE_CONFIG.update({
        'CACHE_REDIS_HOST': cache_redis_url.hostname,
        'CACHE_REDIS_PORT': cache_redis_url.port,
        'CACHE_REDIS_DB': cache_redis_db
    })


# input cache: memory or redis
REQUEST_CACHE_BACKEND = os.getenv('REQUEST_CACHE_BACKEND', 'memory')
REQUEST_CACHE_TIMEOUT_SECONDS = os.getenv('REQUEST_CACHE_TIMEOUT_SECONDS', 3600)
if REQUEST_CACHE_BACKEND == 'redis':
    REQUEST_CACHE_EXTRAS = {
        "connection": redis.from_url(CACHE_CONFIG['CACHE_REDIS_URL'])
    }
    REQUEST_CACHE_NAME = os.getenv('REQUEST_CACHE_NAME','hxl-proxy-in') # no trailing colon needed

# Cache name and timeout for requests to iTOS
# (otherwise uses REQUEST_CACHE_*): memory or redis
ITOS_CACHE_NAME = 'itos-in' # no trailing colon needed
ITOS_CACHE_BACKEND = 'memory'
ITOS_CACHE_TIMEOUT = 604800

#
# Database connection info
#

# 'sqlite3' or 'mysql'
DB_TYPE=os.getenv('DB_TYPE', 'sqlite3')

# Schema file, for tests.
DB_SCHEMA_FILE = os.getenv('DB_SCHEMA_FILE', 'schema-sqlite3.sql')

# SQLite3 settings
DB_FILE='/tmp/hxl-proxy.db'

# MySQL settings
DB_HOST = os.getenv('MYSQL_HOST', 'localhost')
DB_DATABASE = os.getenv('MYSQL_DB', 'hxl_proxy')
DB_PORT = os.getenv('DB_PORT', 3306)
DB_USERNAME = os.getenv('MYSQL_USER', '')
DB_PASSWORD = os.getenv('MYSQL_PASS', '')

#
# Values for Google Drive access
#
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '<client id>')
GOOGLE_OAUTH_ID = os.getenv('GOOGLE_OAUTH_ID', '<oauth id>')

#
# Values for Humanitarian.ID remote login
#
HID_CLIENT_ID = os.getenv('HID_CLIENT_ID', '<client id>')
HID_CLIENT_SECRET = os.getenv('HID_CLIENT_SECRET', '<client secret>')
HID_REDIRECT_URI = os.getenv('HID_REDIRECT_URI', '<redirect URI>')
HID_BASE_URL = os.getenv('HID_BASE_URL', 'https://auth.humanitarian.id') # change to http://auth.dev.humanitarian.id for dev testing

#
# Where to find shapes, etc. for p-codes. Usually leave as-is.
#
PCODE_BASE_URL = 'https://hxlstandard.github.io/p-codes'

#
# Countries available for mapping (update as needed).
#
PCODE_COUNTRY_MAP = {
    'Burundi': 'BDI',
    'Cameroon': 'CMR',
    'Chad': 'TCD',
    'Ecuador': 'ECU',
    'Guinea': 'GIN',
    'Haiti': 'HTI',
    'Mali': 'MLI',
    'Nepal': 'NPL',
    'Niger': 'NER',
    'Nigeria': 'NGA',
    'Somalia': 'SOM',
}

# end
